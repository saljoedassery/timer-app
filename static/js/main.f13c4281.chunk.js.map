{"version":3,"sources":["components/Header.js","components/EventTitle.js","components/Event.js","components/MainComponent.js","App.js","serviceWorker.js","index.js","images/event.svg","images/delete.svg","images/edit.svg","images/alarm.svg"],"names":["Header","className","React","Component","EventTitle","props","searchEvents","keyword","searchOnChange","event","target","value","onClick","this","handleShow","src","addEventIcon","alt","type","placeholder","onChange","Event","tick","daysLeft","state","hoursLeft","minsLeft","secondsLeft","displayDate","clearInterval","interval","setState","deleteEvent","index","editEvent","setInterval","day","month","year","alarmIcon","name","description","deleteIcon","editIcon","MainComponent","saveChangeHandle","date","Date","getTime","errorMessage","show","eventEdit","editCurrentEvent","addNewEvent","timeLeft","findTimeLeft","getDate","monthNames","getMonth","getFullYear","eventTitle","eventDescription","eventList","push","originalEventList","today","delta","Math","abs","days","floor","hours","minutes","seconds","toFixed","currentEditedEvent","id","splice","console","log","handleClose","handleDateChange","handleTitleChange","handleDescriptionChange","filter","includes","map","key","Modal","onHide","closeButton","Title","Body","htmlFor","selected","dateFormat","showTimeSelect","timeIntervals","Footer","Button","variant","style","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.f13c4281.chunk.js","sourcesContent":["import React from 'react'\n\nclass Header extends React.Component {\n    render () {\n        return (\n            <div className=\"header\">\n                <h1>Online Timer</h1>\n            </div>\n        )\n    }\n}\nexport default Header","import React from \"react\";\nimport addEventIcon from \"../images/event.svg\";\n\nclass EventTitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.keyword = \"\";\n  }\n\n  searchEvents = () => {\n    this.props.searchEvents(this.keyword);\n  };\n\n  searchOnChange = (event) => {\n    this.keyword = event.target.value;\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"event-title\">\n          <h2>Events</h2>\n          <div className=\"event-action-div\">\n            <button\n              className=\"add-event-button\"\n              onClick={this.props.handleShow}\n            >\n              <img src={addEventIcon} alt=\"Add event\" />\n              Add Event\n            </button>\n            <div className=\"event-search-div\">\n              <input\n                type=\"text\"\n                className=\"event-search-input\"\n                placeholder=\"Search events..\"\n                onChange={this.searchOnChange}\n              />\n              <button\n                className=\"event-search-button\"\n                onClick={this.searchEvents}\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </div>\n        <hr />\n      </>\n    );\n  }\n}\nexport default EventTitle;\n","import React from \"react\";\nimport deleteIcon from \"../images/delete.svg\";\nimport editIcon from \"../images/edit.svg\";\nimport alarmIcon from \"../images/alarm.svg\";\n\nclass Event extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      daysLeft: this.props.event.daysLeft,\n      hoursLeft: this.props.event.hoursLeft,\n      minsLeft: this.props.event.minsLeft,\n      secondsLeft: this.props.event.secondsLeft,\n    };\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.tick, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  tick = () => {\n    var daysLeft = this.state.daysLeft;\n    var hoursLeft = this.state.hoursLeft;\n    var minsLeft = this.state.minsLeft;\n    var secondsLeft = this.state.secondsLeft;\n    var displayDate = true;\n\n    secondsLeft -= 1;\n    if (secondsLeft < 0) {\n      secondsLeft = 59;\n      minsLeft -= 1;\n      if (minsLeft < 0) {\n        hoursLeft -= 1;\n        minsLeft = 59;\n        if (hoursLeft < 0) {\n          daysLeft -= 1;\n          hoursLeft = 23;\n          if (daysLeft < 0) {\n            clearInterval(this.interval);\n            displayDate = false;\n          }\n        }\n      }\n    }\n    if (displayDate)\n      this.setState({\n        secondsLeft: secondsLeft,\n        hoursLeft: hoursLeft,\n        daysLeft: daysLeft,\n        minsLeft: minsLeft,\n      });\n  };\n\n  deleteEvent = () => {\n    clearInterval(this.interval);\n    this.props.deleteEvent(this.props.index);\n  };\n\n  editEvent = () => {\n    this.props.editEvent(this.props.index);\n  };\n\n  render() {\n    return (\n      <div className=\"event\">\n        <div className=\"date-section\">\n          <p className=\"day-text\">{this.props.event.day}</p>\n          <p className=\"month-text\">{this.props.event.month}</p>\n          <p className=\"year-text\">{this.props.event.year}</p>\n        </div>\n\n        <div className=\"event-detail-section\">\n          <div className=\"event-detail-container\">\n            <div className=\"event-heading\">\n              <img src={alarmIcon} alt=\"Alarm icon\" />\n              <p>{this.props.event.name}</p>\n            </div>\n            <div className=\"event-description\">\n              <p>{this.props.event.description}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"timer-section\">\n          <div className=\"timer-container\">\n            <div className=\"days-section\">\n              <p className=\"days\">{this.state.daysLeft}</p>\n              <p className=\"days-text\">Days</p>\n            </div>\n            <div className=\"hours-section\">\n              <p className=\"hours\">{this.state.hoursLeft}</p>\n              <p className=\"hours-text\">Hours</p>\n            </div>\n            <div className=\"minutes-section\">\n              <p className=\"minutes\">{this.state.minsLeft}</p>\n              <p className=\"minute-text\">Minutes</p>\n            </div>\n            <div className=\"seconds-section\">\n              <p className=\"seconds\">{this.state.secondsLeft}</p>\n              <p className=\"second-text\">Seconds</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"button-section\">\n          <div className=\"button-container\">\n            <button className=\"delete-button\" onClick={this.deleteEvent}>\n              <img src={deleteIcon} alt=\"delete icon\" />\n              Delete\n            </button>\n            <button className=\"edit-button\" onClick={this.editEvent}>\n              <img src={editIcon} alt=\"edit icon\" />\n              Edit\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Event;\n","import React from \"react\";\nimport EventTitle from \"./EventTitle\";\nimport Event from \"./Event\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    this.state = {\n      eventList: [],\n      originalEventList: [],\n      show: false,\n      date: new Date(),\n      errorMessage: \"\",\n      eventTitle: \"\",\n      eventDescription: \"\",\n    };\n    this.eventEdit = false;\n    this.currentEditedEvent = null;\n  }\n\n  saveChangeHandle = () => {\n    if (this.state.date <= new Date().getTime()) {\n      this.setState({ errorMessage: \"Invalid date! Try again\" });\n    } else {\n      this.setState({ errorMessage: \"\", show: false });\n\n      if (!this.eventEdit) this.addNewEvent();\n      else this.editCurrentEvent();\n    }\n  };\n\n  addNewEvent = () => {\n    var timeLeft = this.findTimeLeft(this.state.date);\n\n    var event = {\n      day: this.state.date.getDate(),\n      month: this.monthNames[this.state.date.getMonth()],\n      year: this.state.date.getFullYear(),\n      daysLeft: timeLeft[0],\n      hoursLeft: timeLeft[1],\n      minsLeft: timeLeft[2],\n      secondsLeft: timeLeft[3],\n      name: this.state.eventTitle,\n      description: this.state.eventDescription,\n    };\n    var eventList = this.state.eventList;\n    eventList.push(event);\n    this.setState({\n      eventList: eventList,\n      originalEventList: eventList,\n      date: new Date(),\n      errorMessage: \"\",\n      eventTitle: \"\",\n      eventDescription: \"\",\n    });\n    this.eventEdit = false;\n  };\n\n  findTimeLeft = (date) => {\n    var today = new Date();\n    today = today.getTime();\n    var delta = Math.abs(date - today) / 1000;\n    var days = Math.floor(delta / 86400);\n    delta -= days * 86400;\n    var hours = Math.floor(delta / 3600) % 24;\n    delta -= hours * 3600;\n    var minutes = Math.floor(delta / 60) % 60;\n    delta -= minutes * 60;\n    var seconds = delta % 60;\n    seconds = seconds.toFixed(0);\n\n    return [days, hours, minutes, seconds];\n  };\n\n  editCurrentEvent = () => {\n    this.deleteEvent(this.currentEditedEvent);\n    this.addNewEvent();\n  };\n\n  deleteEvent = (id) => {\n    var eventList = this.state.eventList;\n    eventList.splice(id, 1);\n    this.setState({ eventList: eventList, originalEventList: eventList });\n  };\n\n  editEvent = (id) => {\n    console.log(\"Edit event called for index: \", id);\n    this.setState({\n      show: true,\n      eventTitle: this.state.eventList[id].name,\n      eventDescription: this.state.eventList[id].description,\n    });\n    this.eventEdit = true;\n    this.currentEditedEvent = id;\n  };\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  handleDateChange = (date) => {\n    console.log(date.getTime(), date);\n    this.setState({ date: date });\n  };\n\n  handleTitleChange = (event) => {\n    this.setState({ eventTitle: event.target.value });\n  };\n\n  handleDescriptionChange = (event) => {\n    this.setState({ eventDescription: event.target.value });\n  };\n\n  searchEvents = (keyword) => {\n    console.log(keyword + \" searched\");\n    var eventList = this.state.originalEventList;\n    if (keyword !== null || keyword !== \"\") {\n      eventList = eventList.filter(\n        (event) =>\n          event.name.includes(keyword) || event.description.includes(keyword)\n      );\n    }\n    this.setState({ eventList: eventList });\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <EventTitle\n          handleShow={this.handleShow}\n          searchEvents={(keyword) => this.searchEvents(keyword)}\n        />\n        {this.state.eventList.map((event, index) => (\n          <Event\n            event={event}\n            key={index}\n            index={index}\n            deleteEvent={(id) => this.deleteEvent(id)}\n            editEvent={(id) => this.editEvent(id)}\n          />\n        ))}\n\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add New Event</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"add-event-container\">\n              <label htmlFor=\"event-title\">Event title</label>\n              <input\n                type=\"text\"\n                className=\"event-title-input\"\n                name=\"event-title\"\n                placeholder=\"Event name...\"\n                onChange={this.handleTitleChange}\n                value={this.state.eventTitle}\n              />\n\n              <label htmlFor=\"new-event-description\">Event description</label>\n              <input\n                type=\"text\"\n                className=\"event-description-input\"\n                name=\"new-event-description\"\n                placeholder=\"Event description...\"\n                onChange={this.handleDescriptionChange}\n                value={this.state.eventDescription}\n              />\n              <label htmlFor=\"event-date\">Event date</label>\n              <DatePicker\n                selected={this.state.date}\n                onChange={this.handleDateChange}\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\n                showTimeSelect\n                timeIntervals={1}\n              />\n              <p className=\"error-message\">{this.state.errorMessage}</p>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={this.saveChangeHandle}\n              style={{ backgroundColor: \"#138496\" }}\n            >\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default MainComponent;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MainComponent from './components/MainComponent';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainComponent />\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/event.d033a437.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.b17a93ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.2927f8de.svg\";","module.exports = __webpack_public_path__ + \"static/media/alarm.e294ff69.svg\";"],"sourceRoot":""}